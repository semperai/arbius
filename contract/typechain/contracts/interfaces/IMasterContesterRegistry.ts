/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IMasterContesterRegistryInterface extends utils.Interface {
  functions: {
    "candidateVotes(address)": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "finalizeEpoch()": FunctionFragment;
    "getMasterContesters()": FunctionFragment;
    "getTopCandidates()": FunctionFragment;
    "getVotesCast(uint256,address)": FunctionFragment;
    "hasVoted(uint256,address)": FunctionFragment;
    "isMasterContester(address)": FunctionFragment;
    "isNewEpoch()": FunctionFragment;
    "lastVoteEpoch(address)": FunctionFragment;
    "lastVoteWeight(address)": FunctionFragment;
    "masterContesterCount()": FunctionFragment;
    "timeUntilNextEpoch()": FunctionFragment;
    "vote(address[],uint256)": FunctionFragment;
    "voteMultiple(address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "candidateVotes"
      | "currentEpoch"
      | "finalizeEpoch"
      | "getMasterContesters"
      | "getTopCandidates"
      | "getVotesCast"
      | "hasVoted"
      | "isMasterContester"
      | "isNewEpoch"
      | "lastVoteEpoch"
      | "lastVoteWeight"
      | "masterContesterCount"
      | "timeUntilNextEpoch"
      | "vote"
      | "voteMultiple"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "candidateVotes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMasterContesters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTopCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesCast",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMasterContester",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isNewEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastVoteEpoch",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastVoteWeight",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContesterCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeUntilNextEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteMultiple",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "candidateVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMasterContesters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotesCast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMasterContester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isNewEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastVoteEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterContesterCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeUntilNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteMultiple",
    data: BytesLike
  ): Result;

  events: {
    "EmergencyMasterContesterAdded(address)": EventFragment;
    "EmergencyMasterContesterRemoved(address)": EventFragment;
    "EpochFinalized(uint256,address[])": EventFragment;
    "MasterContesterCountChanged(uint256,uint256)": EventFragment;
    "VoteCast(address,address,uint256,uint256)": EventFragment;
    "VoteUndone(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "EmergencyMasterContesterAdded"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyMasterContesterRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochFinalized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MasterContesterCountChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteUndone"): EventFragment;
}

export interface EmergencyMasterContesterAddedEventObject {
  contester: string;
}
export type EmergencyMasterContesterAddedEvent = TypedEvent<
  [string],
  EmergencyMasterContesterAddedEventObject
>;

export type EmergencyMasterContesterAddedEventFilter =
  TypedEventFilter<EmergencyMasterContesterAddedEvent>;

export interface EmergencyMasterContesterRemovedEventObject {
  contester: string;
}
export type EmergencyMasterContesterRemovedEvent = TypedEvent<
  [string],
  EmergencyMasterContesterRemovedEventObject
>;

export type EmergencyMasterContesterRemovedEventFilter =
  TypedEventFilter<EmergencyMasterContesterRemovedEvent>;

export interface EpochFinalizedEventObject {
  epoch: BigNumber;
  elected: string[];
}
export type EpochFinalizedEvent = TypedEvent<
  [BigNumber, string[]],
  EpochFinalizedEventObject
>;

export type EpochFinalizedEventFilter = TypedEventFilter<EpochFinalizedEvent>;

export interface MasterContesterCountChangedEventObject {
  oldCount: BigNumber;
  newCount: BigNumber;
}
export type MasterContesterCountChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MasterContesterCountChangedEventObject
>;

export type MasterContesterCountChangedEventFilter =
  TypedEventFilter<MasterContesterCountChangedEvent>;

export interface VoteCastEventObject {
  voter: string;
  candidate: string;
  weight: BigNumber;
  epoch: BigNumber;
}
export type VoteCastEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface VoteUndoneEventObject {
  voter: string;
  candidate: string;
  weight: BigNumber;
  epoch: BigNumber;
}
export type VoteUndoneEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  VoteUndoneEventObject
>;

export type VoteUndoneEventFilter = TypedEventFilter<VoteUndoneEvent>;

export interface IMasterContesterRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMasterContesterRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    candidateVotes(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalizeEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMasterContesters(overrides?: CallOverrides): Promise<[string[]]>;

    getTopCandidates(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { addresses: string[]; votes: BigNumber[] }
    >;

    getVotesCast(
      epoch: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    hasVoted(
      epoch: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMasterContester(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNewEpoch(overrides?: CallOverrides): Promise<[boolean]>;

    lastVoteEpoch(
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastVoteWeight(
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    masterContesterCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeUntilNextEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      candidates: PromiseOrValue<string>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteMultiple(
      candidates: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  candidateVotes(
    candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  finalizeEpoch(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMasterContesters(overrides?: CallOverrides): Promise<string[]>;

  getTopCandidates(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { addresses: string[]; votes: BigNumber[] }
  >;

  getVotesCast(
    epoch: PromiseOrValue<BigNumberish>,
    voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  hasVoted(
    epoch: PromiseOrValue<BigNumberish>,
    voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMasterContester(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNewEpoch(overrides?: CallOverrides): Promise<boolean>;

  lastVoteEpoch(
    voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastVoteWeight(
    voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  masterContesterCount(overrides?: CallOverrides): Promise<BigNumber>;

  timeUntilNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    candidates: PromiseOrValue<string>[],
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteMultiple(
    candidates: PromiseOrValue<string>[],
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    candidateVotes(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeEpoch(overrides?: CallOverrides): Promise<void>;

    getMasterContesters(overrides?: CallOverrides): Promise<string[]>;

    getTopCandidates(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { addresses: string[]; votes: BigNumber[] }
    >;

    getVotesCast(
      epoch: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    hasVoted(
      epoch: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMasterContester(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNewEpoch(overrides?: CallOverrides): Promise<boolean>;

    lastVoteEpoch(
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastVoteWeight(
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterContesterCount(overrides?: CallOverrides): Promise<BigNumber>;

    timeUntilNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      candidates: PromiseOrValue<string>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteMultiple(
      candidates: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EmergencyMasterContesterAdded(address)"(
      contester?: PromiseOrValue<string> | null
    ): EmergencyMasterContesterAddedEventFilter;
    EmergencyMasterContesterAdded(
      contester?: PromiseOrValue<string> | null
    ): EmergencyMasterContesterAddedEventFilter;

    "EmergencyMasterContesterRemoved(address)"(
      contester?: PromiseOrValue<string> | null
    ): EmergencyMasterContesterRemovedEventFilter;
    EmergencyMasterContesterRemoved(
      contester?: PromiseOrValue<string> | null
    ): EmergencyMasterContesterRemovedEventFilter;

    "EpochFinalized(uint256,address[])"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      elected?: null
    ): EpochFinalizedEventFilter;
    EpochFinalized(
      epoch?: PromiseOrValue<BigNumberish> | null,
      elected?: null
    ): EpochFinalizedEventFilter;

    "MasterContesterCountChanged(uint256,uint256)"(
      oldCount?: null,
      newCount?: null
    ): MasterContesterCountChangedEventFilter;
    MasterContesterCountChanged(
      oldCount?: null,
      newCount?: null
    ): MasterContesterCountChangedEventFilter;

    "VoteCast(address,address,uint256,uint256)"(
      voter?: PromiseOrValue<string> | null,
      candidate?: PromiseOrValue<string> | null,
      weight?: null,
      epoch?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: PromiseOrValue<string> | null,
      candidate?: PromiseOrValue<string> | null,
      weight?: null,
      epoch?: null
    ): VoteCastEventFilter;

    "VoteUndone(address,address,uint256,uint256)"(
      voter?: PromiseOrValue<string> | null,
      candidate?: PromiseOrValue<string> | null,
      weight?: null,
      epoch?: null
    ): VoteUndoneEventFilter;
    VoteUndone(
      voter?: PromiseOrValue<string> | null,
      candidate?: PromiseOrValue<string> | null,
      weight?: null,
      epoch?: null
    ): VoteUndoneEventFilter;
  };

  estimateGas: {
    candidateVotes(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMasterContesters(overrides?: CallOverrides): Promise<BigNumber>;

    getTopCandidates(overrides?: CallOverrides): Promise<BigNumber>;

    getVotesCast(
      epoch: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVoted(
      epoch: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMasterContester(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNewEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    lastVoteEpoch(
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastVoteWeight(
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterContesterCount(overrides?: CallOverrides): Promise<BigNumber>;

    timeUntilNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      candidates: PromiseOrValue<string>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteMultiple(
      candidates: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    candidateVotes(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMasterContesters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTopCandidates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotesCast(
      epoch: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVoted(
      epoch: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMasterContester(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNewEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastVoteEpoch(
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastVoteWeight(
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterContesterCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeUntilNextEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      candidates: PromiseOrValue<string>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteMultiple(
      candidates: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
