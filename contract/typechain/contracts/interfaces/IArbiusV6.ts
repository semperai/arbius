/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IArbiusV6 {
  export type ModelStruct = {
    fee: PromiseOrValue<BigNumberish>;
    addr: PromiseOrValue<string>;
    rate: PromiseOrValue<BigNumberish>;
    cid: PromiseOrValue<BytesLike>;
  };

  export type ModelStructOutput = [BigNumber, string, BigNumber, string] & {
    fee: BigNumber;
    addr: string;
    rate: BigNumber;
    cid: string;
  };

  export type TaskStruct = {
    model: PromiseOrValue<BytesLike>;
    fee: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    blocktime: PromiseOrValue<BigNumberish>;
    version: PromiseOrValue<BigNumberish>;
    cid: PromiseOrValue<BytesLike>;
  };

  export type TaskStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    number,
    string
  ] & {
    model: string;
    fee: BigNumber;
    owner: string;
    blocktime: BigNumber;
    version: number;
    cid: string;
  };
}

export interface IArbiusV6Interface extends utils.Interface {
  functions: {
    "accruedFees()": FunctionFragment;
    "addToModelAllowList(bytes32,address[])": FunctionFragment;
    "baseToken()": FunctionFragment;
    "bulkSubmitSolution(bytes32[],bytes[])": FunctionFragment;
    "bulkSubmitTask(uint8,address,bytes32,uint256,bytes,uint256)": FunctionFragment;
    "cancelValidatorWithdraw(uint256)": FunctionFragment;
    "claimSolution(bytes32)": FunctionFragment;
    "clearSolutionModelFeePercentageOverride(bytes32)": FunctionFragment;
    "commitments(bytes32)": FunctionFragment;
    "contestationVoteExtensionTime()": FunctionFragment;
    "contestationVoteFinish(bytes32,uint32)": FunctionFragment;
    "contestationVoteNays(bytes32,uint256)": FunctionFragment;
    "contestationVoteYeas(bytes32,uint256)": FunctionFragment;
    "contestationVoted(bytes32,address)": FunctionFragment;
    "contestationVotedIndex(bytes32)": FunctionFragment;
    "contestations(bytes32)": FunctionFragment;
    "diffMul(uint256,uint256)": FunctionFragment;
    "disableModelAllowList(bytes32)": FunctionFragment;
    "exitValidatorMinUnlockTime()": FunctionFragment;
    "generateCommitment(address,bytes32,bytes)": FunctionFragment;
    "generateIPFSCID(bytes)": FunctionFragment;
    "getPsuedoTotalSupply()": FunctionFragment;
    "getReward()": FunctionFragment;
    "getSlashAmount()": FunctionFragment;
    "getValidatorMinimum()": FunctionFragment;
    "hasSolutionModelFeePercentageOverride(bytes32)": FunctionFragment;
    "hashModel((uint256,address,uint256,bytes),address)": FunctionFragment;
    "hashTask((bytes32,uint256,address,uint64,uint8,bytes),address,bytes32)": FunctionFragment;
    "initialize()": FunctionFragment;
    "initiateValidatorWithdraw(uint256)": FunctionFragment;
    "isSolverAllowed(bytes32,address)": FunctionFragment;
    "lastContestationLossTime(address)": FunctionFragment;
    "lastSolutionSubmission(address)": FunctionFragment;
    "masterContesterRegistry()": FunctionFragment;
    "masterContesterVoteAdder()": FunctionFragment;
    "maxContestationValidatorStakeSince()": FunctionFragment;
    "minClaimSolutionTime()": FunctionFragment;
    "minContestationVotePeriodTime()": FunctionFragment;
    "minRetractionWaitTime()": FunctionFragment;
    "modelRequiresAllowList(bytes32)": FunctionFragment;
    "models(bytes32)": FunctionFragment;
    "paused()": FunctionFragment;
    "pauser()": FunctionFragment;
    "pendingValidatorWithdrawRequests(address,uint256)": FunctionFragment;
    "pendingValidatorWithdrawRequestsCount(address)": FunctionFragment;
    "prevhash()": FunctionFragment;
    "registerModel(address,uint256,bytes)": FunctionFragment;
    "registerModelWithAllowList(address,uint256,bytes,address[])": FunctionFragment;
    "removeFromModelAllowList(bytes32,address[])": FunctionFragment;
    "retractionFeePercentage()": FunctionFragment;
    "reward(uint256,uint256)": FunctionFragment;
    "setMasterContesterRegistry(address)": FunctionFragment;
    "setMasterContesterVoteAdder(uint32)": FunctionFragment;
    "setModelAddr(bytes32,address)": FunctionFragment;
    "setModelFee(bytes32,uint256)": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "setSolutionMineableRate(bytes32,uint256)": FunctionFragment;
    "setSolutionModelFeePercentage(uint256)": FunctionFragment;
    "setSolutionModelFeePercentageOverride(bytes32,uint256)": FunctionFragment;
    "setStartBlockTime(uint64)": FunctionFragment;
    "setVeStaking(address)": FunctionFragment;
    "setVersion(uint256)": FunctionFragment;
    "setVoter(address)": FunctionFragment;
    "signalCommitment(bytes32)": FunctionFragment;
    "slashAmountPercentage()": FunctionFragment;
    "solutionFeePercentage()": FunctionFragment;
    "solutionModelFeePercentage()": FunctionFragment;
    "solutionModelFeePercentageOverride(bytes32)": FunctionFragment;
    "solutionRateLimit()": FunctionFragment;
    "solutions(bytes32)": FunctionFragment;
    "solutionsStake(bytes32)": FunctionFragment;
    "solutionsStakeAmount()": FunctionFragment;
    "startBlockTime()": FunctionFragment;
    "submitContestation(bytes32)": FunctionFragment;
    "submitSolution(bytes32,bytes)": FunctionFragment;
    "submitTask(uint8,address,bytes32,uint256,bytes)": FunctionFragment;
    "suggestContestation(bytes32)": FunctionFragment;
    "targetTs(uint256)": FunctionFragment;
    "taskOwnerRewardPercentage()": FunctionFragment;
    "tasks(bytes32)": FunctionFragment;
    "totalHeld()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferPauser(address)": FunctionFragment;
    "transferTreasury(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "treasuryRewardPercentage()": FunctionFragment;
    "validatorCanVote(address,bytes32)": FunctionFragment;
    "validatorDeposit(address,uint256)": FunctionFragment;
    "validatorMinimumPercentage()": FunctionFragment;
    "validatorWithdraw(uint256,address)": FunctionFragment;
    "validatorWithdrawPendingAmount(address)": FunctionFragment;
    "validators(address)": FunctionFragment;
    "veRewards()": FunctionFragment;
    "veStaking()": FunctionFragment;
    "version()": FunctionFragment;
    "voteOnContestation(bytes32,bool)": FunctionFragment;
    "voter()": FunctionFragment;
    "votingPeriodEnded(bytes32)": FunctionFragment;
    "withdrawAccruedFees()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accruedFees"
      | "addToModelAllowList"
      | "baseToken"
      | "bulkSubmitSolution"
      | "bulkSubmitTask"
      | "cancelValidatorWithdraw"
      | "claimSolution"
      | "clearSolutionModelFeePercentageOverride"
      | "commitments"
      | "contestationVoteExtensionTime"
      | "contestationVoteFinish"
      | "contestationVoteNays"
      | "contestationVoteYeas"
      | "contestationVoted"
      | "contestationVotedIndex"
      | "contestations"
      | "diffMul"
      | "disableModelAllowList"
      | "exitValidatorMinUnlockTime"
      | "generateCommitment"
      | "generateIPFSCID"
      | "getPsuedoTotalSupply"
      | "getReward"
      | "getSlashAmount"
      | "getValidatorMinimum"
      | "hasSolutionModelFeePercentageOverride"
      | "hashModel"
      | "hashTask"
      | "initialize"
      | "initiateValidatorWithdraw"
      | "isSolverAllowed"
      | "lastContestationLossTime"
      | "lastSolutionSubmission"
      | "masterContesterRegistry"
      | "masterContesterVoteAdder"
      | "maxContestationValidatorStakeSince"
      | "minClaimSolutionTime"
      | "minContestationVotePeriodTime"
      | "minRetractionWaitTime"
      | "modelRequiresAllowList"
      | "models"
      | "paused"
      | "pauser"
      | "pendingValidatorWithdrawRequests"
      | "pendingValidatorWithdrawRequestsCount"
      | "prevhash"
      | "registerModel"
      | "registerModelWithAllowList"
      | "removeFromModelAllowList"
      | "retractionFeePercentage"
      | "reward"
      | "setMasterContesterRegistry"
      | "setMasterContesterVoteAdder"
      | "setModelAddr"
      | "setModelFee"
      | "setPaused"
      | "setSolutionMineableRate"
      | "setSolutionModelFeePercentage"
      | "setSolutionModelFeePercentageOverride"
      | "setStartBlockTime"
      | "setVeStaking"
      | "setVersion"
      | "setVoter"
      | "signalCommitment"
      | "slashAmountPercentage"
      | "solutionFeePercentage"
      | "solutionModelFeePercentage"
      | "solutionModelFeePercentageOverride"
      | "solutionRateLimit"
      | "solutions"
      | "solutionsStake"
      | "solutionsStakeAmount"
      | "startBlockTime"
      | "submitContestation"
      | "submitSolution"
      | "submitTask"
      | "suggestContestation"
      | "targetTs"
      | "taskOwnerRewardPercentage"
      | "tasks"
      | "totalHeld"
      | "transferOwnership"
      | "transferPauser"
      | "transferTreasury"
      | "treasury"
      | "treasuryRewardPercentage"
      | "validatorCanVote"
      | "validatorDeposit"
      | "validatorMinimumPercentage"
      | "validatorWithdraw"
      | "validatorWithdrawPendingAmount"
      | "validators"
      | "veRewards"
      | "veStaking"
      | "version"
      | "voteOnContestation"
      | "voter"
      | "votingPeriodEnded"
      | "withdrawAccruedFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accruedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToModelAllowList",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bulkSubmitSolution",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkSubmitTask",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelValidatorWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSolution",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearSolutionModelFeePercentageOverride",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoteExtensionTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoteFinish",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoteNays",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoteYeas",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoted",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVotedIndex",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "contestations",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "diffMul",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableModelAllowList",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "exitValidatorMinUnlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateCommitment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateIPFSCID",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPsuedoTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSlashAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorMinimum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasSolutionModelFeePercentageOverride",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashModel",
    values: [IArbiusV6.ModelStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashTask",
    values: [
      IArbiusV6.TaskStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateValidatorWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSolverAllowed",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastContestationLossTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSolutionSubmission",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContesterRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterContesterVoteAdder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxContestationValidatorStakeSince",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minClaimSolutionTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minContestationVotePeriodTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minRetractionWaitTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modelRequiresAllowList",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "models",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingValidatorWithdrawRequests",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingValidatorWithdrawRequestsCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "prevhash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerModel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerModelWithAllowList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromModelAllowList",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "retractionFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterContesterRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterContesterVoteAdder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setModelAddr",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setModelFee",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaused",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSolutionMineableRate",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSolutionModelFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSolutionModelFeePercentageOverride",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartBlockTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVeStaking",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVersion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalCommitment",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "slashAmountPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solutionFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solutionModelFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solutionModelFeePercentageOverride",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "solutionRateLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solutions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "solutionsStake",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "solutionsStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startBlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitContestation",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSolution",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTask",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "suggestContestation",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "targetTs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "taskOwnerRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tasks",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "totalHeld", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorCanVote",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorDeposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorMinimumPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorWithdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorWithdrawPendingAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "veRewards", values?: undefined): string;
  encodeFunctionData(functionFragment: "veStaking", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voteOnContestation",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votingPeriodEnded",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAccruedFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accruedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToModelAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkSubmitSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkSubmitTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelValidatorWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearSolutionModelFeePercentageOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoteExtensionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoteFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoteNays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoteYeas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVotedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diffMul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableModelAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitValidatorMinUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateIPFSCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPsuedoTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSlashAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSolutionModelFeePercentageOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashModel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateValidatorWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSolverAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastContestationLossTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSolutionSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterContesterRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterContesterVoteAdder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxContestationValidatorStakeSince",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minClaimSolutionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minContestationVotePeriodTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRetractionWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modelRequiresAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "models", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidatorWithdrawRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidatorWithdrawRequestsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prevhash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerModelWithAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromModelAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retractionFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMasterContesterRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMasterContesterVoteAdder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setModelAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setModelFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSolutionMineableRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSolutionModelFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSolutionModelFeePercentageOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartBlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVeStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signalCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashAmountPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solutionFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solutionModelFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solutionModelFeePercentageOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solutionRateLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solutions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "solutionsStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solutionsStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startBlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitContestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "suggestContestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "targetTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taskOwnerRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalHeld", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorCanVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorMinimumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorWithdrawPendingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteOnContestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriodEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAccruedFees",
    data: BytesLike
  ): Result;

  events: {
    "ContestationSubmitted(address,bytes32)": EventFragment;
    "ContestationSuggested(address,bytes32)": EventFragment;
    "ContestationVote(address,bytes32,bool)": EventFragment;
    "ContestationVoteFinish(bytes32,uint32,uint32)": EventFragment;
    "FeesPaid(bytes32,bytes32,address,uint256,uint256,uint256,uint256)": EventFragment;
    "MasterContesterRegistrySet(address)": EventFragment;
    "MasterContesterVoteAdderSet(uint32)": EventFragment;
    "ModelAddrChanged(bytes32,address)": EventFragment;
    "ModelAllowListRequirementChanged(bytes32,bool)": EventFragment;
    "ModelAllowListUpdated(bytes32,address,bool)": EventFragment;
    "ModelFeeChanged(bytes32,uint256)": EventFragment;
    "ModelRegistered(bytes32)": EventFragment;
    "PausedChanged(bool)": EventFragment;
    "PauserTransferred(address)": EventFragment;
    "RewardsPaid(bytes32,bytes32,address,uint256,uint256,uint256,uint256)": EventFragment;
    "SignalCommitment(address,bytes32)": EventFragment;
    "SolutionClaimed(address,bytes32)": EventFragment;
    "SolutionMineableRateChange(bytes32,uint256)": EventFragment;
    "SolutionModelFeePercentageChanged(uint256)": EventFragment;
    "SolutionModelFeePercentageOverrideCleared(bytes32)": EventFragment;
    "SolutionSubmitted(address,bytes32)": EventFragment;
    "StartBlockTimeChanged(uint64)": EventFragment;
    "TaskSubmitted(bytes32,bytes32,uint256,address)": EventFragment;
    "TreasuryTransferred(address)": EventFragment;
    "ValidatorDeposit(address,address,uint256)": EventFragment;
    "ValidatorWithdraw(address,address,uint256,uint256)": EventFragment;
    "ValidatorWithdrawCancelled(address,uint256)": EventFragment;
    "ValidatorWithdrawInitiated(address,uint256,uint256,uint256)": EventFragment;
    "VersionChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContestationSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContestationSuggested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContestationVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContestationVoteFinish"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MasterContesterRegistrySet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MasterContesterVoteAdderSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModelAddrChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ModelAllowListRequirementChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModelAllowListUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModelFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModelRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalCommitment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SolutionClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SolutionMineableRateChange"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SolutionModelFeePercentageChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SolutionModelFeePercentageOverrideCleared"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SolutionSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartBlockTimeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorWithdrawCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorWithdrawInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionChanged"): EventFragment;
}

export interface ContestationSubmittedEventObject {
  addr: string;
  task: string;
}
export type ContestationSubmittedEvent = TypedEvent<
  [string, string],
  ContestationSubmittedEventObject
>;

export type ContestationSubmittedEventFilter =
  TypedEventFilter<ContestationSubmittedEvent>;

export interface ContestationSuggestedEventObject {
  addr: string;
  task: string;
}
export type ContestationSuggestedEvent = TypedEvent<
  [string, string],
  ContestationSuggestedEventObject
>;

export type ContestationSuggestedEventFilter =
  TypedEventFilter<ContestationSuggestedEvent>;

export interface ContestationVoteEventObject {
  addr: string;
  task: string;
  yea: boolean;
}
export type ContestationVoteEvent = TypedEvent<
  [string, string, boolean],
  ContestationVoteEventObject
>;

export type ContestationVoteEventFilter =
  TypedEventFilter<ContestationVoteEvent>;

export interface ContestationVoteFinishEventObject {
  id: string;
  start_idx: number;
  end_idx: number;
}
export type ContestationVoteFinishEvent = TypedEvent<
  [string, number, number],
  ContestationVoteFinishEventObject
>;

export type ContestationVoteFinishEventFilter =
  TypedEventFilter<ContestationVoteFinishEvent>;

export interface FeesPaidEventObject {
  model: string;
  task: string;
  validator: string;
  modelFee: BigNumber;
  treasuryFee: BigNumber;
  remainingFee: BigNumber;
  validatorFee: BigNumber;
}
export type FeesPaidEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  FeesPaidEventObject
>;

export type FeesPaidEventFilter = TypedEventFilter<FeesPaidEvent>;

export interface MasterContesterRegistrySetEventObject {
  registry: string;
}
export type MasterContesterRegistrySetEvent = TypedEvent<
  [string],
  MasterContesterRegistrySetEventObject
>;

export type MasterContesterRegistrySetEventFilter =
  TypedEventFilter<MasterContesterRegistrySetEvent>;

export interface MasterContesterVoteAdderSetEventObject {
  adder: number;
}
export type MasterContesterVoteAdderSetEvent = TypedEvent<
  [number],
  MasterContesterVoteAdderSetEventObject
>;

export type MasterContesterVoteAdderSetEventFilter =
  TypedEventFilter<MasterContesterVoteAdderSetEvent>;

export interface ModelAddrChangedEventObject {
  id: string;
  addr: string;
}
export type ModelAddrChangedEvent = TypedEvent<
  [string, string],
  ModelAddrChangedEventObject
>;

export type ModelAddrChangedEventFilter =
  TypedEventFilter<ModelAddrChangedEvent>;

export interface ModelAllowListRequirementChangedEventObject {
  model: string;
  required: boolean;
}
export type ModelAllowListRequirementChangedEvent = TypedEvent<
  [string, boolean],
  ModelAllowListRequirementChangedEventObject
>;

export type ModelAllowListRequirementChangedEventFilter =
  TypedEventFilter<ModelAllowListRequirementChangedEvent>;

export interface ModelAllowListUpdatedEventObject {
  model: string;
  solver: string;
  added: boolean;
}
export type ModelAllowListUpdatedEvent = TypedEvent<
  [string, string, boolean],
  ModelAllowListUpdatedEventObject
>;

export type ModelAllowListUpdatedEventFilter =
  TypedEventFilter<ModelAllowListUpdatedEvent>;

export interface ModelFeeChangedEventObject {
  id: string;
  fee: BigNumber;
}
export type ModelFeeChangedEvent = TypedEvent<
  [string, BigNumber],
  ModelFeeChangedEventObject
>;

export type ModelFeeChangedEventFilter = TypedEventFilter<ModelFeeChangedEvent>;

export interface ModelRegisteredEventObject {
  id: string;
}
export type ModelRegisteredEvent = TypedEvent<
  [string],
  ModelRegisteredEventObject
>;

export type ModelRegisteredEventFilter = TypedEventFilter<ModelRegisteredEvent>;

export interface PausedChangedEventObject {
  paused: boolean;
}
export type PausedChangedEvent = TypedEvent<
  [boolean],
  PausedChangedEventObject
>;

export type PausedChangedEventFilter = TypedEventFilter<PausedChangedEvent>;

export interface PauserTransferredEventObject {
  to: string;
}
export type PauserTransferredEvent = TypedEvent<
  [string],
  PauserTransferredEventObject
>;

export type PauserTransferredEventFilter =
  TypedEventFilter<PauserTransferredEvent>;

export interface RewardsPaidEventObject {
  model: string;
  task: string;
  validator: string;
  totalRewards: BigNumber;
  treasuryReward: BigNumber;
  taskOwnerReward: BigNumber;
  validatorReward: BigNumber;
}
export type RewardsPaidEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  RewardsPaidEventObject
>;

export type RewardsPaidEventFilter = TypedEventFilter<RewardsPaidEvent>;

export interface SignalCommitmentEventObject {
  addr: string;
  commitment: string;
}
export type SignalCommitmentEvent = TypedEvent<
  [string, string],
  SignalCommitmentEventObject
>;

export type SignalCommitmentEventFilter =
  TypedEventFilter<SignalCommitmentEvent>;

export interface SolutionClaimedEventObject {
  addr: string;
  task: string;
}
export type SolutionClaimedEvent = TypedEvent<
  [string, string],
  SolutionClaimedEventObject
>;

export type SolutionClaimedEventFilter = TypedEventFilter<SolutionClaimedEvent>;

export interface SolutionMineableRateChangeEventObject {
  id: string;
  rate: BigNumber;
}
export type SolutionMineableRateChangeEvent = TypedEvent<
  [string, BigNumber],
  SolutionMineableRateChangeEventObject
>;

export type SolutionMineableRateChangeEventFilter =
  TypedEventFilter<SolutionMineableRateChangeEvent>;

export interface SolutionModelFeePercentageChangedEventObject {
  percentage: BigNumber;
}
export type SolutionModelFeePercentageChangedEvent = TypedEvent<
  [BigNumber],
  SolutionModelFeePercentageChangedEventObject
>;

export type SolutionModelFeePercentageChangedEventFilter =
  TypedEventFilter<SolutionModelFeePercentageChangedEvent>;

export interface SolutionModelFeePercentageOverrideClearedEventObject {
  model: string;
}
export type SolutionModelFeePercentageOverrideClearedEvent = TypedEvent<
  [string],
  SolutionModelFeePercentageOverrideClearedEventObject
>;

export type SolutionModelFeePercentageOverrideClearedEventFilter =
  TypedEventFilter<SolutionModelFeePercentageOverrideClearedEvent>;

export interface SolutionSubmittedEventObject {
  addr: string;
  task: string;
}
export type SolutionSubmittedEvent = TypedEvent<
  [string, string],
  SolutionSubmittedEventObject
>;

export type SolutionSubmittedEventFilter =
  TypedEventFilter<SolutionSubmittedEvent>;

export interface StartBlockTimeChangedEventObject {
  startBlockTime: BigNumber;
}
export type StartBlockTimeChangedEvent = TypedEvent<
  [BigNumber],
  StartBlockTimeChangedEventObject
>;

export type StartBlockTimeChangedEventFilter =
  TypedEventFilter<StartBlockTimeChangedEvent>;

export interface TaskSubmittedEventObject {
  id: string;
  model: string;
  fee: BigNumber;
  sender: string;
}
export type TaskSubmittedEvent = TypedEvent<
  [string, string, BigNumber, string],
  TaskSubmittedEventObject
>;

export type TaskSubmittedEventFilter = TypedEventFilter<TaskSubmittedEvent>;

export interface TreasuryTransferredEventObject {
  to: string;
}
export type TreasuryTransferredEvent = TypedEvent<
  [string],
  TreasuryTransferredEventObject
>;

export type TreasuryTransferredEventFilter =
  TypedEventFilter<TreasuryTransferredEvent>;

export interface ValidatorDepositEventObject {
  addr: string;
  validator: string;
  amount: BigNumber;
}
export type ValidatorDepositEvent = TypedEvent<
  [string, string, BigNumber],
  ValidatorDepositEventObject
>;

export type ValidatorDepositEventFilter =
  TypedEventFilter<ValidatorDepositEvent>;

export interface ValidatorWithdrawEventObject {
  addr: string;
  to: string;
  count: BigNumber;
  amount: BigNumber;
}
export type ValidatorWithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ValidatorWithdrawEventObject
>;

export type ValidatorWithdrawEventFilter =
  TypedEventFilter<ValidatorWithdrawEvent>;

export interface ValidatorWithdrawCancelledEventObject {
  addr: string;
  count: BigNumber;
}
export type ValidatorWithdrawCancelledEvent = TypedEvent<
  [string, BigNumber],
  ValidatorWithdrawCancelledEventObject
>;

export type ValidatorWithdrawCancelledEventFilter =
  TypedEventFilter<ValidatorWithdrawCancelledEvent>;

export interface ValidatorWithdrawInitiatedEventObject {
  addr: string;
  count: BigNumber;
  unlockTime: BigNumber;
  amount: BigNumber;
}
export type ValidatorWithdrawInitiatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ValidatorWithdrawInitiatedEventObject
>;

export type ValidatorWithdrawInitiatedEventFilter =
  TypedEventFilter<ValidatorWithdrawInitiatedEvent>;

export interface VersionChangedEventObject {
  version: BigNumber;
}
export type VersionChangedEvent = TypedEvent<
  [BigNumber],
  VersionChangedEventObject
>;

export type VersionChangedEventFilter = TypedEventFilter<VersionChangedEvent>;

export interface IArbiusV6 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IArbiusV6Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accruedFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToModelAllowList(
      model_: PromiseOrValue<BytesLike>,
      solvers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    bulkSubmitSolution(
      taskids_: PromiseOrValue<BytesLike>[],
      cids_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bulkSubmitTask(
      version_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelValidatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimSolution(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearSolutionModelFeePercentageOverride(
      model_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contestationVoteExtensionTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contestationVoteFinish(
      taskid_: PromiseOrValue<BytesLike>,
      amnt_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contestationVoteNays(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contestationVoteYeas(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contestationVoted(
      taskid: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contestationVotedIndex(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contestations(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, BigNumber] & {
        validator: string;
        blocktime: BigNumber;
        finish_start_index: number;
        slashAmount: BigNumber;
      }
    >;

    diffMul(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    disableModelAllowList(
      model_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitValidatorMinUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    generateCommitment(
      sender_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateIPFSCID(
      content_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPsuedoTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSlashAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValidatorMinimum(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasSolutionModelFeePercentageOverride(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hashModel(
      o_: IArbiusV6.ModelStruct,
      sender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashTask(
      o_: IArbiusV6.TaskStruct,
      sender_: PromiseOrValue<string>,
      prevhash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateValidatorWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isSolverAllowed(
      model_: PromiseOrValue<BytesLike>,
      solver_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastContestationLossTime(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastSolutionSubmission(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    masterContesterRegistry(overrides?: CallOverrides): Promise<[string]>;

    masterContesterVoteAdder(overrides?: CallOverrides): Promise<[number]>;

    maxContestationValidatorStakeSince(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minClaimSolutionTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    minContestationVotePeriodTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minRetractionWaitTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    modelRequiresAllowList(
      model_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    models(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string] & {
        fee: BigNumber;
        addr: string;
        rate: BigNumber;
        cid: string;
      }
    >;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pauser(overrides?: CallOverrides): Promise<[string]>;

    pendingValidatorWithdrawRequests(
      addr: PromiseOrValue<string>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { unlockTime: BigNumber; amount: BigNumber }
    >;

    pendingValidatorWithdrawRequestsCount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    prevhash(overrides?: CallOverrides): Promise<[string]>;

    registerModel(
      addr_: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      template_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerModelWithAllowList(
      addr_: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      template_: PromiseOrValue<BytesLike>,
      allowList_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFromModelAllowList(
      model_: PromiseOrValue<BytesLike>,
      solvers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retractionFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setMasterContesterRegistry(
      registry_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMasterContesterVoteAdder(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setModelAddr(
      model_: PromiseOrValue<BytesLike>,
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setModelFee(
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      paused_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSolutionMineableRate(
      model_: PromiseOrValue<BytesLike>,
      rate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSolutionModelFeePercentage(
      solutionModelFeePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSolutionModelFeePercentageOverride(
      model_: PromiseOrValue<BytesLike>,
      solutionModelFeePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStartBlockTime(
      startBlockTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVeStaking(
      veStaking_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVersion(
      version_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVoter(
      voter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalCommitment(
      commitment_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slashAmountPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    solutionFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    solutionModelFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    solutionModelFeePercentageOverride(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    solutionRateLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    solutions(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, string] & {
        validator: string;
        blocktime: BigNumber;
        claimed: boolean;
        cid: string;
      }
    >;

    solutionsStake(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    solutionsStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    startBlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    submitContestation(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitSolution(
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitTask(
      version_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    suggestContestation(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    targetTs(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    taskOwnerRewardPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    tasks(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, number, string] & {
        model: string;
        fee: BigNumber;
        owner: string;
        blocktime: BigNumber;
        version: number;
        cid: string;
      }
    >;

    totalHeld(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferPauser(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTreasury(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    treasuryRewardPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorCanVote(
      addr_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validatorDeposit(
      validator_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validatorMinimumPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validatorWithdrawPendingAmount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validators(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        staked: BigNumber;
        since: BigNumber;
        validatorAddr: string;
      }
    >;

    veRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    veStaking(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteOnContestation(
      taskid_: PromiseOrValue<BytesLike>,
      yea_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voter(overrides?: CallOverrides): Promise<[string]>;

    votingPeriodEnded(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawAccruedFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

  addToModelAllowList(
    model_: PromiseOrValue<BytesLike>,
    solvers_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  bulkSubmitSolution(
    taskids_: PromiseOrValue<BytesLike>[],
    cids_: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bulkSubmitTask(
    version_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    model_: PromiseOrValue<BytesLike>,
    fee_: PromiseOrValue<BigNumberish>,
    input_: PromiseOrValue<BytesLike>,
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelValidatorWithdraw(
    count_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimSolution(
    taskid_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearSolutionModelFeePercentageOverride(
    model_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitments(
    commitment: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contestationVoteExtensionTime(overrides?: CallOverrides): Promise<BigNumber>;

  contestationVoteFinish(
    taskid_: PromiseOrValue<BytesLike>,
    amnt_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contestationVoteNays(
    taskid: PromiseOrValue<BytesLike>,
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  contestationVoteYeas(
    taskid: PromiseOrValue<BytesLike>,
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  contestationVoted(
    taskid: PromiseOrValue<BytesLike>,
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  contestationVotedIndex(
    taskid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contestations(
    taskid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, BigNumber] & {
      validator: string;
      blocktime: BigNumber;
      finish_start_index: number;
      slashAmount: BigNumber;
    }
  >;

  diffMul(
    t: PromiseOrValue<BigNumberish>,
    ts: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  disableModelAllowList(
    model_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitValidatorMinUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  generateCommitment(
    sender_: PromiseOrValue<string>,
    taskid_: PromiseOrValue<BytesLike>,
    cid_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  generateIPFSCID(
    content_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPsuedoTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getReward(overrides?: CallOverrides): Promise<BigNumber>;

  getSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getValidatorMinimum(overrides?: CallOverrides): Promise<BigNumber>;

  hasSolutionModelFeePercentageOverride(
    model: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashModel(
    o_: IArbiusV6.ModelStruct,
    sender_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  hashTask(
    o_: IArbiusV6.TaskStruct,
    sender_: PromiseOrValue<string>,
    prevhash_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateValidatorWithdraw(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isSolverAllowed(
    model_: PromiseOrValue<BytesLike>,
    solver_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastContestationLossTime(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastSolutionSubmission(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  masterContesterRegistry(overrides?: CallOverrides): Promise<string>;

  masterContesterVoteAdder(overrides?: CallOverrides): Promise<number>;

  maxContestationValidatorStakeSince(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minClaimSolutionTime(overrides?: CallOverrides): Promise<BigNumber>;

  minContestationVotePeriodTime(overrides?: CallOverrides): Promise<BigNumber>;

  minRetractionWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

  modelRequiresAllowList(
    model_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  models(
    model: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string] & {
      fee: BigNumber;
      addr: string;
      rate: BigNumber;
      cid: string;
    }
  >;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pauser(overrides?: CallOverrides): Promise<string>;

  pendingValidatorWithdrawRequests(
    addr: PromiseOrValue<string>,
    count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { unlockTime: BigNumber; amount: BigNumber }
  >;

  pendingValidatorWithdrawRequestsCount(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prevhash(overrides?: CallOverrides): Promise<string>;

  registerModel(
    addr_: PromiseOrValue<string>,
    fee_: PromiseOrValue<BigNumberish>,
    template_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerModelWithAllowList(
    addr_: PromiseOrValue<string>,
    fee_: PromiseOrValue<BigNumberish>,
    template_: PromiseOrValue<BytesLike>,
    allowList_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFromModelAllowList(
    model_: PromiseOrValue<BytesLike>,
    solvers_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retractionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  reward(
    t: PromiseOrValue<BigNumberish>,
    ts: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setMasterContesterRegistry(
    registry_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMasterContesterVoteAdder(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setModelAddr(
    model_: PromiseOrValue<BytesLike>,
    addr_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setModelFee(
    model_: PromiseOrValue<BytesLike>,
    fee_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    paused_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSolutionMineableRate(
    model_: PromiseOrValue<BytesLike>,
    rate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSolutionModelFeePercentage(
    solutionModelFeePercentage_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSolutionModelFeePercentageOverride(
    model_: PromiseOrValue<BytesLike>,
    solutionModelFeePercentage_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStartBlockTime(
    startBlockTime_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVeStaking(
    veStaking_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVersion(
    version_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVoter(
    voter_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalCommitment(
    commitment_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slashAmountPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  solutionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  solutionModelFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  solutionModelFeePercentageOverride(
    model: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  solutionRateLimit(overrides?: CallOverrides): Promise<BigNumber>;

  solutions(
    taskid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, string] & {
      validator: string;
      blocktime: BigNumber;
      claimed: boolean;
      cid: string;
    }
  >;

  solutionsStake(
    taskid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  solutionsStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  startBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  submitContestation(
    taskid_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitSolution(
    taskid_: PromiseOrValue<BytesLike>,
    cid_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitTask(
    version_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    model_: PromiseOrValue<BytesLike>,
    fee_: PromiseOrValue<BigNumberish>,
    input_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  suggestContestation(
    taskid_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  targetTs(
    t: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  taskOwnerRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  tasks(
    taskid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, number, string] & {
      model: string;
      fee: BigNumber;
      owner: string;
      blocktime: BigNumber;
      version: number;
      cid: string;
    }
  >;

  totalHeld(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    to_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferPauser(
    to_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTreasury(
    to_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  treasuryRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  validatorCanVote(
    addr_: PromiseOrValue<string>,
    taskid_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validatorDeposit(
    validator_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validatorMinimumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  validatorWithdraw(
    count_: PromiseOrValue<BigNumberish>,
    to_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validatorWithdrawPendingAmount(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validators(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      staked: BigNumber;
      since: BigNumber;
      validatorAddr: string;
    }
  >;

  veRewards(overrides?: CallOverrides): Promise<BigNumber>;

  veStaking(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  voteOnContestation(
    taskid_: PromiseOrValue<BytesLike>,
    yea_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voter(overrides?: CallOverrides): Promise<string>;

  votingPeriodEnded(
    taskid_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawAccruedFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

    addToModelAllowList(
      model_: PromiseOrValue<BytesLike>,
      solvers_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    bulkSubmitSolution(
      taskids_: PromiseOrValue<BytesLike>[],
      cids_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    bulkSubmitTask(
      version_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelValidatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSolution(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    clearSolutionModelFeePercentageOverride(
      model_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    commitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestationVoteExtensionTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestationVoteFinish(
      taskid_: PromiseOrValue<BytesLike>,
      amnt_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    contestationVoteNays(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    contestationVoteYeas(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    contestationVoted(
      taskid: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contestationVotedIndex(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestations(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, BigNumber] & {
        validator: string;
        blocktime: BigNumber;
        finish_start_index: number;
        slashAmount: BigNumber;
      }
    >;

    diffMul(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableModelAllowList(
      model_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    exitValidatorMinUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    generateCommitment(
      sender_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    generateIPFSCID(
      content_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPsuedoTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(overrides?: CallOverrides): Promise<BigNumber>;

    getSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    hasSolutionModelFeePercentageOverride(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashModel(
      o_: IArbiusV6.ModelStruct,
      sender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    hashTask(
      o_: IArbiusV6.TaskStruct,
      sender_: PromiseOrValue<string>,
      prevhash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    initiateValidatorWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSolverAllowed(
      model_: PromiseOrValue<BytesLike>,
      solver_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastContestationLossTime(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSolutionSubmission(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterContesterRegistry(overrides?: CallOverrides): Promise<string>;

    masterContesterVoteAdder(overrides?: CallOverrides): Promise<number>;

    maxContestationValidatorStakeSince(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minClaimSolutionTime(overrides?: CallOverrides): Promise<BigNumber>;

    minContestationVotePeriodTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minRetractionWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    modelRequiresAllowList(
      model_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    models(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string] & {
        fee: BigNumber;
        addr: string;
        rate: BigNumber;
        cid: string;
      }
    >;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pauser(overrides?: CallOverrides): Promise<string>;

    pendingValidatorWithdrawRequests(
      addr: PromiseOrValue<string>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { unlockTime: BigNumber; amount: BigNumber }
    >;

    pendingValidatorWithdrawRequestsCount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevhash(overrides?: CallOverrides): Promise<string>;

    registerModel(
      addr_: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      template_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerModelWithAllowList(
      addr_: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      template_: PromiseOrValue<BytesLike>,
      allowList_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string>;

    removeFromModelAllowList(
      model_: PromiseOrValue<BytesLike>,
      solvers_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    retractionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    reward(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMasterContesterRegistry(
      registry_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMasterContesterVoteAdder(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setModelAddr(
      model_: PromiseOrValue<BytesLike>,
      addr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setModelFee(
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(
      paused_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSolutionMineableRate(
      model_: PromiseOrValue<BytesLike>,
      rate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSolutionModelFeePercentage(
      solutionModelFeePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSolutionModelFeePercentageOverride(
      model_: PromiseOrValue<BytesLike>,
      solutionModelFeePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStartBlockTime(
      startBlockTime_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVeStaking(
      veStaking_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVersion(
      version_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoter(
      voter_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalCommitment(
      commitment_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    slashAmountPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutionModelFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutionModelFeePercentageOverride(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    solutionRateLimit(overrides?: CallOverrides): Promise<BigNumber>;

    solutions(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, string] & {
        validator: string;
        blocktime: BigNumber;
        claimed: boolean;
        cid: string;
      }
    >;

    solutionsStake(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    solutionsStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    startBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    submitContestation(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitSolution(
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTask(
      version_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    suggestContestation(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    targetTs(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taskOwnerRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    tasks(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, number, string] & {
        model: string;
        fee: BigNumber;
        owner: string;
        blocktime: BigNumber;
        version: number;
        cid: string;
      }
    >;

    totalHeld(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPauser(
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTreasury(
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    treasuryRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    validatorCanVote(
      addr_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorDeposit(
      validator_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorMinimumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    validatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorWithdrawPendingAmount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validators(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        staked: BigNumber;
        since: BigNumber;
        validatorAddr: string;
      }
    >;

    veRewards(overrides?: CallOverrides): Promise<BigNumber>;

    veStaking(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    voteOnContestation(
      taskid_: PromiseOrValue<BytesLike>,
      yea_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    voter(overrides?: CallOverrides): Promise<string>;

    votingPeriodEnded(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawAccruedFees(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ContestationSubmitted(address,bytes32)"(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): ContestationSubmittedEventFilter;
    ContestationSubmitted(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): ContestationSubmittedEventFilter;

    "ContestationSuggested(address,bytes32)"(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): ContestationSuggestedEventFilter;
    ContestationSuggested(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): ContestationSuggestedEventFilter;

    "ContestationVote(address,bytes32,bool)"(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null,
      yea?: null
    ): ContestationVoteEventFilter;
    ContestationVote(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null,
      yea?: null
    ): ContestationVoteEventFilter;

    "ContestationVoteFinish(bytes32,uint32,uint32)"(
      id?: PromiseOrValue<BytesLike> | null,
      start_idx?: PromiseOrValue<BigNumberish> | null,
      end_idx?: null
    ): ContestationVoteFinishEventFilter;
    ContestationVoteFinish(
      id?: PromiseOrValue<BytesLike> | null,
      start_idx?: PromiseOrValue<BigNumberish> | null,
      end_idx?: null
    ): ContestationVoteFinishEventFilter;

    "FeesPaid(bytes32,bytes32,address,uint256,uint256,uint256,uint256)"(
      model?: PromiseOrValue<BytesLike> | null,
      task?: PromiseOrValue<BytesLike> | null,
      validator?: PromiseOrValue<string> | null,
      modelFee?: null,
      treasuryFee?: null,
      remainingFee?: null,
      validatorFee?: null
    ): FeesPaidEventFilter;
    FeesPaid(
      model?: PromiseOrValue<BytesLike> | null,
      task?: PromiseOrValue<BytesLike> | null,
      validator?: PromiseOrValue<string> | null,
      modelFee?: null,
      treasuryFee?: null,
      remainingFee?: null,
      validatorFee?: null
    ): FeesPaidEventFilter;

    "MasterContesterRegistrySet(address)"(
      registry?: PromiseOrValue<string> | null
    ): MasterContesterRegistrySetEventFilter;
    MasterContesterRegistrySet(
      registry?: PromiseOrValue<string> | null
    ): MasterContesterRegistrySetEventFilter;

    "MasterContesterVoteAdderSet(uint32)"(
      adder?: null
    ): MasterContesterVoteAdderSetEventFilter;
    MasterContesterVoteAdderSet(
      adder?: null
    ): MasterContesterVoteAdderSetEventFilter;

    "ModelAddrChanged(bytes32,address)"(
      id?: PromiseOrValue<BytesLike> | null,
      addr?: null
    ): ModelAddrChangedEventFilter;
    ModelAddrChanged(
      id?: PromiseOrValue<BytesLike> | null,
      addr?: null
    ): ModelAddrChangedEventFilter;

    "ModelAllowListRequirementChanged(bytes32,bool)"(
      model?: PromiseOrValue<BytesLike> | null,
      required?: null
    ): ModelAllowListRequirementChangedEventFilter;
    ModelAllowListRequirementChanged(
      model?: PromiseOrValue<BytesLike> | null,
      required?: null
    ): ModelAllowListRequirementChangedEventFilter;

    "ModelAllowListUpdated(bytes32,address,bool)"(
      model?: PromiseOrValue<BytesLike> | null,
      solver?: PromiseOrValue<string> | null,
      added?: null
    ): ModelAllowListUpdatedEventFilter;
    ModelAllowListUpdated(
      model?: PromiseOrValue<BytesLike> | null,
      solver?: PromiseOrValue<string> | null,
      added?: null
    ): ModelAllowListUpdatedEventFilter;

    "ModelFeeChanged(bytes32,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      fee?: null
    ): ModelFeeChangedEventFilter;
    ModelFeeChanged(
      id?: PromiseOrValue<BytesLike> | null,
      fee?: null
    ): ModelFeeChangedEventFilter;

    "ModelRegistered(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ModelRegisteredEventFilter;
    ModelRegistered(
      id?: PromiseOrValue<BytesLike> | null
    ): ModelRegisteredEventFilter;

    "PausedChanged(bool)"(
      paused?: PromiseOrValue<boolean> | null
    ): PausedChangedEventFilter;
    PausedChanged(
      paused?: PromiseOrValue<boolean> | null
    ): PausedChangedEventFilter;

    "PauserTransferred(address)"(
      to?: PromiseOrValue<string> | null
    ): PauserTransferredEventFilter;
    PauserTransferred(
      to?: PromiseOrValue<string> | null
    ): PauserTransferredEventFilter;

    "RewardsPaid(bytes32,bytes32,address,uint256,uint256,uint256,uint256)"(
      model?: PromiseOrValue<BytesLike> | null,
      task?: PromiseOrValue<BytesLike> | null,
      validator?: PromiseOrValue<string> | null,
      totalRewards?: null,
      treasuryReward?: null,
      taskOwnerReward?: null,
      validatorReward?: null
    ): RewardsPaidEventFilter;
    RewardsPaid(
      model?: PromiseOrValue<BytesLike> | null,
      task?: PromiseOrValue<BytesLike> | null,
      validator?: PromiseOrValue<string> | null,
      totalRewards?: null,
      treasuryReward?: null,
      taskOwnerReward?: null,
      validatorReward?: null
    ): RewardsPaidEventFilter;

    "SignalCommitment(address,bytes32)"(
      addr?: PromiseOrValue<string> | null,
      commitment?: PromiseOrValue<BytesLike> | null
    ): SignalCommitmentEventFilter;
    SignalCommitment(
      addr?: PromiseOrValue<string> | null,
      commitment?: PromiseOrValue<BytesLike> | null
    ): SignalCommitmentEventFilter;

    "SolutionClaimed(address,bytes32)"(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): SolutionClaimedEventFilter;
    SolutionClaimed(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): SolutionClaimedEventFilter;

    "SolutionMineableRateChange(bytes32,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      rate?: null
    ): SolutionMineableRateChangeEventFilter;
    SolutionMineableRateChange(
      id?: PromiseOrValue<BytesLike> | null,
      rate?: null
    ): SolutionMineableRateChangeEventFilter;

    "SolutionModelFeePercentageChanged(uint256)"(
      percentage?: null
    ): SolutionModelFeePercentageChangedEventFilter;
    SolutionModelFeePercentageChanged(
      percentage?: null
    ): SolutionModelFeePercentageChangedEventFilter;

    "SolutionModelFeePercentageOverrideCleared(bytes32)"(
      model?: PromiseOrValue<BytesLike> | null
    ): SolutionModelFeePercentageOverrideClearedEventFilter;
    SolutionModelFeePercentageOverrideCleared(
      model?: PromiseOrValue<BytesLike> | null
    ): SolutionModelFeePercentageOverrideClearedEventFilter;

    "SolutionSubmitted(address,bytes32)"(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): SolutionSubmittedEventFilter;
    SolutionSubmitted(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): SolutionSubmittedEventFilter;

    "StartBlockTimeChanged(uint64)"(
      startBlockTime?: PromiseOrValue<BigNumberish> | null
    ): StartBlockTimeChangedEventFilter;
    StartBlockTimeChanged(
      startBlockTime?: PromiseOrValue<BigNumberish> | null
    ): StartBlockTimeChangedEventFilter;

    "TaskSubmitted(bytes32,bytes32,uint256,address)"(
      id?: PromiseOrValue<BytesLike> | null,
      model?: PromiseOrValue<BytesLike> | null,
      fee?: null,
      sender?: PromiseOrValue<string> | null
    ): TaskSubmittedEventFilter;
    TaskSubmitted(
      id?: PromiseOrValue<BytesLike> | null,
      model?: PromiseOrValue<BytesLike> | null,
      fee?: null,
      sender?: PromiseOrValue<string> | null
    ): TaskSubmittedEventFilter;

    "TreasuryTransferred(address)"(
      to?: PromiseOrValue<string> | null
    ): TreasuryTransferredEventFilter;
    TreasuryTransferred(
      to?: PromiseOrValue<string> | null
    ): TreasuryTransferredEventFilter;

    "ValidatorDeposit(address,address,uint256)"(
      addr?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): ValidatorDepositEventFilter;
    ValidatorDeposit(
      addr?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): ValidatorDepositEventFilter;

    "ValidatorWithdraw(address,address,uint256,uint256)"(
      addr?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      count?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ValidatorWithdrawEventFilter;
    ValidatorWithdraw(
      addr?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      count?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ValidatorWithdrawEventFilter;

    "ValidatorWithdrawCancelled(address,uint256)"(
      addr?: PromiseOrValue<string> | null,
      count?: PromiseOrValue<BigNumberish> | null
    ): ValidatorWithdrawCancelledEventFilter;
    ValidatorWithdrawCancelled(
      addr?: PromiseOrValue<string> | null,
      count?: PromiseOrValue<BigNumberish> | null
    ): ValidatorWithdrawCancelledEventFilter;

    "ValidatorWithdrawInitiated(address,uint256,uint256,uint256)"(
      addr?: PromiseOrValue<string> | null,
      count?: PromiseOrValue<BigNumberish> | null,
      unlockTime?: null,
      amount?: null
    ): ValidatorWithdrawInitiatedEventFilter;
    ValidatorWithdrawInitiated(
      addr?: PromiseOrValue<string> | null,
      count?: PromiseOrValue<BigNumberish> | null,
      unlockTime?: null,
      amount?: null
    ): ValidatorWithdrawInitiatedEventFilter;

    "VersionChanged(uint256)"(version?: null): VersionChangedEventFilter;
    VersionChanged(version?: null): VersionChangedEventFilter;
  };

  estimateGas: {
    accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

    addToModelAllowList(
      model_: PromiseOrValue<BytesLike>,
      solvers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    bulkSubmitSolution(
      taskids_: PromiseOrValue<BytesLike>[],
      cids_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bulkSubmitTask(
      version_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelValidatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimSolution(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearSolutionModelFeePercentageOverride(
      model_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestationVoteExtensionTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestationVoteFinish(
      taskid_: PromiseOrValue<BytesLike>,
      amnt_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contestationVoteNays(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestationVoteYeas(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestationVoted(
      taskid: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestationVotedIndex(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestations(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    diffMul(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableModelAllowList(
      model_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitValidatorMinUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    generateCommitment(
      sender_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateIPFSCID(
      content_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPsuedoTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(overrides?: CallOverrides): Promise<BigNumber>;

    getSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    hasSolutionModelFeePercentageOverride(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashModel(
      o_: IArbiusV6.ModelStruct,
      sender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashTask(
      o_: IArbiusV6.TaskStruct,
      sender_: PromiseOrValue<string>,
      prevhash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateValidatorWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isSolverAllowed(
      model_: PromiseOrValue<BytesLike>,
      solver_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastContestationLossTime(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSolutionSubmission(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterContesterRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    masterContesterVoteAdder(overrides?: CallOverrides): Promise<BigNumber>;

    maxContestationValidatorStakeSince(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minClaimSolutionTime(overrides?: CallOverrides): Promise<BigNumber>;

    minContestationVotePeriodTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minRetractionWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    modelRequiresAllowList(
      model_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    models(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pauser(overrides?: CallOverrides): Promise<BigNumber>;

    pendingValidatorWithdrawRequests(
      addr: PromiseOrValue<string>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingValidatorWithdrawRequestsCount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevhash(overrides?: CallOverrides): Promise<BigNumber>;

    registerModel(
      addr_: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      template_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerModelWithAllowList(
      addr_: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      template_: PromiseOrValue<BytesLike>,
      allowList_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFromModelAllowList(
      model_: PromiseOrValue<BytesLike>,
      solvers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retractionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    reward(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMasterContesterRegistry(
      registry_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMasterContesterVoteAdder(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setModelAddr(
      model_: PromiseOrValue<BytesLike>,
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setModelFee(
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaused(
      paused_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSolutionMineableRate(
      model_: PromiseOrValue<BytesLike>,
      rate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSolutionModelFeePercentage(
      solutionModelFeePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSolutionModelFeePercentageOverride(
      model_: PromiseOrValue<BytesLike>,
      solutionModelFeePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStartBlockTime(
      startBlockTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVeStaking(
      veStaking_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVersion(
      version_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVoter(
      voter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalCommitment(
      commitment_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slashAmountPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutionModelFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutionModelFeePercentageOverride(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    solutionRateLimit(overrides?: CallOverrides): Promise<BigNumber>;

    solutions(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    solutionsStake(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    solutionsStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    startBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    submitContestation(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitSolution(
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitTask(
      version_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    suggestContestation(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    targetTs(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taskOwnerRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    tasks(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalHeld(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferPauser(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTreasury(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    validatorCanVote(
      addr_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorDeposit(
      validator_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validatorMinimumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    validatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validatorWithdrawPendingAmount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validators(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veRewards(overrides?: CallOverrides): Promise<BigNumber>;

    veStaking(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    voteOnContestation(
      taskid_: PromiseOrValue<BytesLike>,
      yea_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voter(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriodEnded(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAccruedFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accruedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToModelAllowList(
      model_: PromiseOrValue<BytesLike>,
      solvers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bulkSubmitSolution(
      taskids_: PromiseOrValue<BytesLike>[],
      cids_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bulkSubmitTask(
      version_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelValidatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimSolution(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearSolutionModelFeePercentageOverride(
      model_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contestationVoteExtensionTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contestationVoteFinish(
      taskid_: PromiseOrValue<BytesLike>,
      amnt_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contestationVoteNays(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contestationVoteYeas(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contestationVoted(
      taskid: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contestationVotedIndex(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contestations(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    diffMul(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableModelAllowList(
      model_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitValidatorMinUnlockTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateCommitment(
      sender_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateIPFSCID(
      content_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPsuedoTotalSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSlashAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidatorMinimum(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSolutionModelFeePercentageOverride(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashModel(
      o_: IArbiusV6.ModelStruct,
      sender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashTask(
      o_: IArbiusV6.TaskStruct,
      sender_: PromiseOrValue<string>,
      prevhash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateValidatorWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isSolverAllowed(
      model_: PromiseOrValue<BytesLike>,
      solver_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastContestationLossTime(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSolutionSubmission(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterContesterRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterContesterVoteAdder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxContestationValidatorStakeSince(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minClaimSolutionTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minContestationVotePeriodTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minRetractionWaitTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modelRequiresAllowList(
      model_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    models(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingValidatorWithdrawRequests(
      addr: PromiseOrValue<string>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingValidatorWithdrawRequestsCount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prevhash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerModel(
      addr_: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      template_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerModelWithAllowList(
      addr_: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      template_: PromiseOrValue<BytesLike>,
      allowList_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFromModelAllowList(
      model_: PromiseOrValue<BytesLike>,
      solvers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retractionFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMasterContesterRegistry(
      registry_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMasterContesterVoteAdder(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setModelAddr(
      model_: PromiseOrValue<BytesLike>,
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setModelFee(
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      paused_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSolutionMineableRate(
      model_: PromiseOrValue<BytesLike>,
      rate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSolutionModelFeePercentage(
      solutionModelFeePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSolutionModelFeePercentageOverride(
      model_: PromiseOrValue<BytesLike>,
      solutionModelFeePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStartBlockTime(
      startBlockTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVeStaking(
      veStaking_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVersion(
      version_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVoter(
      voter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalCommitment(
      commitment_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slashAmountPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solutionFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solutionModelFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solutionModelFeePercentageOverride(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solutionRateLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    solutions(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solutionsStake(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solutionsStakeAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startBlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitContestation(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitSolution(
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitTask(
      version_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    suggestContestation(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    targetTs(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taskOwnerRewardPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tasks(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalHeld(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferPauser(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTreasury(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryRewardPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorCanVote(
      addr_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorDeposit(
      validator_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validatorMinimumPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validatorWithdrawPendingAmount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validators(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteOnContestation(
      taskid_: PromiseOrValue<BytesLike>,
      yea_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriodEnded(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAccruedFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
